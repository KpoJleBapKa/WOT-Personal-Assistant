#include "replayanalyzerpage.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QFileDialog>
#include <QFileInfo>
#include <QMessageBox>
#include <QDebug>
#include <QtConcurrent/QtConcurrent>
#include <QPushButton>
#include <QProgressBar>
#include <QListWidget>
#include <QTextEdit>

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤—ñ –∫–ª–∞—Å–∏
ReplayAnalyzerPage::ReplayAnalyzerPage(DatabaseManager *dbManager, QWidget *parent)
    : QWidget(parent), m_dbManager(dbManager)
{
    // ... (–∫–æ–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫ —Ç–∞ —ñ–Ω—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    QHBoxLayout *topLayout = new QHBoxLayout();

    m_selectFileButton = new QPushButton("–í–∏–±—Ä–∞—Ç–∏ —Ä–µ–ø–ª–µ–π...", this);
    m_selectFileButton->setCursor(Qt::PointingHandCursor);

    m_clearReplaysButton = new QPushButton("–û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–ø–ª–µ—ó", this);
    m_clearReplaysButton->setCursor(Qt::PointingHandCursor);

    m_replayList = new QListWidget(this);
    m_replayList->addItem("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ä–µ–ø–ª–µ—ó:");

    m_resultsTextEdit = new QTextEdit(this);
    m_resultsTextEdit->setReadOnly(true);
    m_resultsTextEdit->setPlainText("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —Ç—É—Ç.");

    m_progressBar = new QProgressBar(this);
    m_progressBar->setRange(0, 100);
    m_progressBar->setValue(0);
    m_progressBar->setAlignment(Qt::AlignCenter);

    topLayout->addWidget(m_selectFileButton);
    topLayout->addWidget(m_clearReplaysButton);
    topLayout->addStretch();

    mainLayout->addLayout(topLayout);
    mainLayout->addWidget(m_progressBar);
    mainLayout->addWidget(m_replayList);
    mainLayout->addWidget(m_resultsTextEdit);
    // ...

    m_replayParser = new ReplayParser(this);
    // üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
    m_metricsCalculator = new MetricsCalculator(this);
    m_behaviorAnalyzer = new BehaviorAnalyzer(this);
    m_recommenderSystem = new RecommenderSystem(this);

    connect(m_selectFileButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onSelectFileButtonClicked);
    connect(m_replayList, &QListWidget::itemClicked, this, &ReplayAnalyzerPage::onReplayListItemClicked);
    connect(&m_watcher, &QFutureWatcher<QVariantMap>::finished, this, &ReplayAnalyzerPage::handleAnalysisFinished);
    connect(m_clearReplaysButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onClearReplaysButtonClicked);

    loadCachedReplays();
}

ReplayAnalyzerPage::~ReplayAnalyzerPage() {} // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –∑–º—ñ–Ω

// ... (–º–µ—Ç–æ–¥–∏ onSelectFileButtonClicked, onReplayListItemClicked, loadCachedReplays, analyzeReplay, handleAnalysisFinished –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
void ReplayAnalyzerPage::onSelectFileButtonClicked() {
    QString filePath = QFileDialog::getOpenFileName(this, "–í–∏–±—Ä–∞—Ç–∏ —Ä–µ–ø–ª–µ–π", "", "World of Tanks Replays (*.wotreplay)");
    if (!filePath.isEmpty()) {
        QFileInfo fileInfo(filePath);
        QListWidgetItem *item = new QListWidgetItem(fileInfo.fileName());
        item->setData(Qt::UserRole, filePath);
        m_replayList->addItem(item);
        analyzeReplay(filePath);
    }
}

void ReplayAnalyzerPage::onReplayListItemClicked(QListWidgetItem *item) {
    if (!item->data(Qt::UserRole).toString().isEmpty()) {
        analyzeReplay(item->data(Qt::UserRole).toString());
    }
}

void ReplayAnalyzerPage::loadCachedReplays() {
    QVariantList cachedReplays = m_dbManager->getReplays();
    for (const QVariant& replayData : cachedReplays) {
        QVariantMap replayMap = replayData.toMap();
        QString filePath = replayMap.value("filePath").toString();
        QFileInfo fileInfo(filePath);
        if (fileInfo.exists()) {
            QListWidgetItem* item = new QListWidgetItem(fileInfo.fileName());
            item->setData(Qt::UserRole, filePath);
            m_replayList->addItem(item);
        }
    }
}

void ReplayAnalyzerPage::analyzeReplay(const QString &filePath) {
    QVariantMap cachedData = m_dbManager->getReplayData(filePath);
    if (!cachedData.isEmpty()) {
        displayStructuredResults(cachedData);
        return;
    }

    m_progressBar->setValue(0);
    m_resultsTextEdit->setPlainText("–ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É —Ñ–∞–π–ª—É: " + filePath + "\n\n");

    QFuture<QVariantMap> future = QtConcurrent::run([this, filePath]() {
        return m_replayParser->parse(filePath);
    });
    m_watcher.setFuture(future);
}

void ReplayAnalyzerPage::handleAnalysisFinished() {
    m_progressBar->setValue(100);
    QVariantMap analysisResults = m_watcher.result();

    if (analysisResults.isEmpty()) {
        QMessageBox::critical(this, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª —Ä–µ–ø–ª–µ—é.");
        m_resultsTextEdit->setPlainText("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ñ–∞–π–ª—É.");
        return;
    }

    QString filePath = analysisResults.value("filePath").toString();
    m_dbManager->addReplayData(filePath, analysisResults);

    displayStructuredResults(analysisResults);
}


// üîπ –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–∏–π —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—ñ –∫–ª–∞—Å–∏
void ReplayAnalyzerPage::displayStructuredResults(const QVariantMap &data)
{
    // ... (–∫–æ–¥ –¥–ª—è –≤–∏–≤–æ–¥—É "–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏" —Ç–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è" –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
    QString report = "<h1>–ó–≤—ñ—Ç –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–ø–ª–µ—é</h1>";
    report += "<h2>–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h2>";
    report += "<ul>";

    QString playerName = data.value("playerName").toString();
    QString mapName = data.value("mapDisplayName").toString();
    QString vehicle = data.value("playerVehicle").toString();

    report += "<li><b>–ì—Ä–∞–≤–µ—Ü—å:</b> " + (playerName.isEmpty() ? "–ù–µ–≤—ñ–¥–æ–º–æ" : playerName) + "</li>";
    report += "<li><b>–ú–∞–ø–∞:</b> " + (mapName.isEmpty() ? "–ù–µ–≤—ñ–¥–æ–º–æ" : mapName) + "</li>";
    report += "<li><b>–¢–µ—Ö–Ω—ñ–∫–∞:</b> " + (vehicle.isEmpty() ? "–ù–µ–≤—ñ–¥–æ–º–æ" : vehicle) + "</li>";
    report += "<li><b>–ö–ª—ñ—î–Ω—Ç XML:</b> " + data.value("clientVersionFromXml").toString() + "</li>";
    report += "<li><b>–ö–ª—ñ—î–Ω—Ç EXE:</b> " + data.value("clientVersionFromExe").toString() + "</li>";
    report += "<li><b>–°–µ—Ä–≤–µ—Ä:</b> " + data.value("serverName").toString() + "</li>";
    report += "</ul>";

    report += "<h2>–ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏</h2>";
    report += "<ul>";

    int playerTeam = 0;
    if (data.contains("vehicles")) {
        QVariantMap vehiclesData = data.value("vehicles").toMap();
        for (auto it = vehiclesData.constBegin(); it != vehiclesData.constEnd(); ++it) {
            QVariantMap vehicleInfo = it.value().toMap();
            if (vehicleInfo.value("name").toString() == playerName) {
                playerTeam = vehicleInfo.value("team").toInt();
                break;
            }
        }
    }

    if (data.contains("winnerTeam") && playerTeam != 0) {
        int winnerTeam = data.value("winnerTeam").toInt();
        QString outcome = "–ù—ñ—á–∏—è";
        if (winnerTeam == playerTeam) {
            outcome = "–ü–µ—Ä–µ–º–æ–≥–∞";
        } else if (winnerTeam != 0) {
            outcome = "–ü–æ—Ä–∞–∑–∫–∞";
        }
        report += "<li><b>–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—é:</b> " + outcome + "</li>";
    } else {
        report += "<li><b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–æ—é –≤—ñ–¥—Å—É—Ç–Ω—è.</b></li>";
    }
    report += "</ul>";

    report += "<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è: " + (playerName.isEmpty() ? "–ù–µ–≤—ñ–¥–æ–º–æ" : playerName) + "</h2>";
    report += "<ul>";

    if (data.contains("personal") && data.contains("playerID")) {
        QVariantMap personalData = data.value("personal").toMap();
        quint64 playerID = data.value("playerID").toULongLong();
        bool foundStats = false;
        int vehicleCount = 0;

        for (auto it = personalData.constBegin(); it != personalData.constEnd(); ++it) {
            if (it.key() != "avatar" && it.value().toMap().value("accountDBID").toULongLong() == playerID) {
                vehicleCount++;
            }
        }

        if (vehicleCount > 1) {
            report += "<p><i>–£ —Ü—å–æ–º—É –±–æ—é –≥—Ä–∞–≤–µ—Ü—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –¥–µ–∫—ñ–ª—å–∫–∞ –æ–¥–∏–Ω–∏—Ü—å —Ç–µ—Ö–Ω—ñ–∫–∏. –ù–∏–∂—á–µ –Ω–∞–≤–µ–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑ –Ω–∏—Ö.</i></p>";
        }

        for (auto it = personalData.constBegin(); it != personalData.constEnd(); ++it) {
            if (it.key() == "avatar") {
                continue;
            }

            QVariantMap vehicleStats = it.value().toMap();
            if (vehicleStats.value("accountDBID").toULongLong() == playerID) {
                foundStats = true;
                report += "<li><b>–ù–∞ —Ç–µ—Ö–Ω—ñ—Ü—ñ (ID " + it.key() + "):</b></li><ul>";
                report += "<li><b>–ù–∞–Ω–µ—Å–µ–Ω–æ —à–∫–æ–¥–∏:</b> " + vehicleStats.value("damageDealt", 0).toString() + "</li>";
                report += "<li><b>–î–æ–ø–æ–º–æ–≥–∞ —É –∑–±–∏—Ç–∫—É (—Ä–∞–¥—ñ–æ):</b> " + vehicleStats.value("damageAssistedRadio", 0).toString() + "</li>";
                report += "<li><b>–î–æ–ø–æ–º–æ–≥–∞ —É –∑–±–∏—Ç–∫—É (–≥—É—Å–µ–Ω–∏—Ü—ñ):</b> " + vehicleStats.value("damageAssistedTrack", 0).toString() + "</li>";
                report += "<li><b>–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —à–∫–æ–¥–∏:</b> " + vehicleStats.value("damageBlockedByArmor", 0).toString() + "</li>";
                report += "<li><b>–ó–Ω–∏—â–µ–Ω–æ:</b> " + vehicleStats.value("kills", 0).toString() + "</li>";
                report += "<li><b>–ü–æ—Å—Ç—Ä—ñ–ª–∏:</b> " + vehicleStats.value("shots", 0).toString() + "</li>";
                report += "<li><b>–í–ª—É—á–∞–Ω–Ω—è:</b> " + vehicleStats.value("directHits", 0).toString() + "</li>";
                report += "<li><b>–ü—Ä–æ–±–∏—Ç—Ç—è:</b> " + vehicleStats.value("piercings", 0).toString() + "</li>";
                report += "<li><b>–û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å–≤—ñ–¥—É:</b> " + vehicleStats.value("xp", 0).toString() + "</li>";
                report += "<li><b>–û—Ç—Ä–∏–º–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤:</b> " + vehicleStats.value("credits", 0).toString() + "</li>";
                report += "</ul>";
            }
        }

        if (!foundStats) {
            report += "<li>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è.</li>";
        }
    } else {
        report += "<li>–î–∞–Ω—ñ –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</li>";
    }
    report += "</ul>";
    // ...

    // üîπ –ù–æ–≤–∏–π –±–ª–æ–∫: –í–∏–∫–ª–∏–∫ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ó—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    QVariantMap metrics = m_metricsCalculator->calculate(data);
    QVariantMap behavior = m_behaviorAnalyzer->analyze(data, metrics);
    QStringList recommendations = m_recommenderSystem->generate(metrics, behavior);

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    report += "<h2>–ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</h2>";
    if (!metrics.isEmpty()) {
        report += "<ul>";
        report += "<li><b>–¢–æ—á–Ω—ñ—Å—Ç—å —Å—Ç—Ä—ñ–ª—å–±–∏:</b> " + metrics.value("accuracy").toString() + "</li>";
        report += "<li><b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–±–∏—Ç—Ç—è:</b> " + metrics.value("penetrationRatio").toString() + "</li>";
        report += "<li><b>–í–Ω–µ—Å–æ–∫ —É –ø–µ—Ä–µ–º–æ–≥—É (—É–º–æ–≤–Ω–∏–π –±–∞–ª):</b> " + metrics.value("contributionScore").toString() + "</li>";
        report += "<li><b>–ß–∞—Å –≤–∏–∂–∏–≤–∞–Ω–Ω—è:</b> " + metrics.value("survivalTime").toString() + "</li>";
        report += "</ul>";
    } else {
        report += "<p>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.</p>";
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
    report += "<h2>–ê–Ω–∞–ª—ñ–∑ —ñ–≥—Ä–æ–≤–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏</h2>";
    if (!behavior.isEmpty()) {
        report += "<ul>";
        report += "<li><b>–°—Ç–∏–ª—å –≥—Ä–∏:</b> " + behavior.value("gameStyle").toString() + "</li>";
        report += "<li><b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å—Ç—Ä—ñ–ª—å–±–∏:</b> " + behavior.value("shootingEffectiveness").toString() + "</li>";
        report += "<li><b>–ö–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞:</b> " + behavior.value("teamPlay").toString() + "</li>";
        report += "</ul>";
    } else {
        report += "<p>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.</p>";
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    report += "<h2>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h2>";
    if (!recommendations.isEmpty()) {
        report += "<ul>";
        for (const QString &rec : recommendations) {
            report += "<li>" + rec + "</li>";
        }
        report += "</ul>";
    } else {
        report += "<p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ.</p>";
    }

    m_resultsTextEdit->clear();
    m_resultsTextEdit->setHtml(report);
}


void ReplayAnalyzerPage::displayResults(const QString& results) {
    m_resultsTextEdit->clear();
    m_resultsTextEdit->setHtml(results);
}


void ReplayAnalyzerPage::onClearReplaysButtonClicked() {
    if (m_dbManager) {
        m_dbManager->clearAllData();
    }

    m_replayList->clear();
    m_replayList->addItem("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ä–µ–ø–ª–µ—ó:");
    m_resultsTextEdit->clear();
    m_resultsTextEdit->setPlainText("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —Ç—É—Ç.");

    QMessageBox::information(this, "–ì–æ—Ç–æ–≤–æ", "–í—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–ø–ª–µ—ó –≤–∏–¥–∞–ª–µ–Ω–æ.");
}
