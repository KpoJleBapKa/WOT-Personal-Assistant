#include "replayanalyzerpage.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QFileDialog>
#include <QFileInfo>
#include <QMessageBox>
#include <QDebug>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QThread>
#include <QtConcurrent/QtConcurrent>
#include <QProgressBar>
#include <QPushButton>
#include <QListWidget>
#include <QTextEdit>

ReplayAnalyzerPage::ReplayAnalyzerPage(DatabaseManager *dbManager, QWidget *parent)
    : QWidget(parent), m_dbManager(dbManager)
{
    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    QHBoxLayout *topLayout = new QHBoxLayout();

    m_selectFileButton = new QPushButton("–í–∏–±—Ä–∞—Ç–∏ —Ä–µ–ø–ª–µ–π...", this);
    m_selectFileButton->setCursor(Qt::PointingHandCursor);

    // –î–æ–¥–∞–Ω–æ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ–ø–ª–µ—ó–≤
    m_clearReplaysButton = new QPushButton("–û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–ø–ª–µ—ó", this);
    m_clearReplaysButton->setCursor(Qt::PointingHandCursor);

    m_replayList = new QListWidget(this);
    m_replayList->addItem("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ä–µ–ø–ª–µ—ó:");

    m_resultsTextEdit = new QTextEdit(this);
    m_resultsTextEdit->setReadOnly(true);
    m_resultsTextEdit->setPlainText("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —Ç—É—Ç.");

    m_progressBar = new QProgressBar(this);
    m_progressBar->setRange(0, 100);
    m_progressBar->setValue(0);
    m_progressBar->setAlignment(Qt::AlignCenter);

    topLayout->addWidget(m_selectFileButton);
    topLayout->addWidget(m_clearReplaysButton); // –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏ –≤ –º–∞–∫–µ—Ç—ñ
    topLayout->addStretch();

    mainLayout->addLayout(topLayout);
    mainLayout->addWidget(m_progressBar);
    mainLayout->addWidget(m_replayList);
    mainLayout->addWidget(m_resultsTextEdit);

    m_replayParser = new ReplayParser(this);

    connect(m_selectFileButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onSelectFileButtonClicked);
    connect(m_replayList, &QListWidget::itemClicked, this, &ReplayAnalyzerPage::onReplayListItemClicked);
    connect(&m_watcher, &QFutureWatcher<QVariantMap>::finished, this, &ReplayAnalyzerPage::handleAnalysisFinished);

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏ –¥–æ –º–µ—Ç–æ–¥—É –æ—á–∏—â–µ–Ω–Ω—è
    connect(m_clearReplaysButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onClearReplaysButtonClicked);

    loadCachedReplays();
}

ReplayAnalyzerPage::~ReplayAnalyzerPage() {}

void ReplayAnalyzerPage::onSelectFileButtonClicked() {
    QString filePath = QFileDialog::getOpenFileName(this, "–í–∏–±—Ä–∞—Ç–∏ —Ä–µ–ø–ª–µ–π", "", "World of Tanks Replays (*.wotreplay)");
    if (!filePath.isEmpty()) {
        QFileInfo fileInfo(filePath);
        QListWidgetItem *item = new QListWidgetItem(fileInfo.fileName());
        item->setData(Qt::UserRole, filePath);
        m_replayList->addItem(item);
        analyzeReplay(filePath);
    }
}

void ReplayAnalyzerPage::onReplayListItemClicked(QListWidgetItem *item) {
    if (!item->data(Qt::UserRole).toString().isEmpty()) {
        analyzeReplay(item->data(Qt::UserRole).toString());
    }
}

void ReplayAnalyzerPage::loadCachedReplays() {
    QVariantList cachedReplays = m_dbManager->getReplays();
    for (const QVariant& replayData : cachedReplays) {
        QVariantMap replayMap = replayData.toMap();
        QString filePath = replayMap.value("filePath").toString();
        QFileInfo fileInfo(filePath);
        if (fileInfo.exists()) {
            QListWidgetItem* item = new QListWidgetItem(fileInfo.fileName());
            item->setData(Qt::UserRole, filePath);
            m_replayList->addItem(item);
        }
    }
}

void ReplayAnalyzerPage::analyzeReplay(const QString &filePath) {
    QVariantMap cachedData = m_dbManager->getReplayData(filePath);
    if (!cachedData.isEmpty()) {
        displayStructuredResults(cachedData);
        return;
    }

    m_progressBar->setValue(0);
    m_resultsTextEdit->setPlainText("–ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É —Ñ–∞–π–ª—É: " + filePath + "\n\n");

    QFuture<QVariantMap> future = QtConcurrent::run([this, filePath]() {
        return m_replayParser->parse(filePath);
    });
    m_watcher.setFuture(future);
}

void ReplayAnalyzerPage::handleAnalysisFinished() {
    m_progressBar->setValue(100);
    QVariantMap analysisResults = m_watcher.result();

    if (analysisResults.isEmpty()) {
        QMessageBox::critical(this, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª —Ä–µ–ø–ª–µ—é.");
        m_resultsTextEdit->setPlainText("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ñ–∞–π–ª—É.");
        return;
    }

    QString filePath = analysisResults.value("filePath").toString();
    m_dbManager->addReplayData(filePath, analysisResults);

    displayStructuredResults(analysisResults);
}

// üîπ –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É
void ReplayAnalyzerPage::displayStructuredResults(const QVariantMap &data) {
    QString report = "<h1>–ó–≤—ñ—Ç –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–ø–ª–µ—é</h1>";
    report += "<h2>–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h2>";
    report += "<ul>";

    QString playerName = data.value("playerName").toString();
    QString mapName = data.value("mapDisplayName").toString();
    QString vehicle = data.value("playerVehicle").toString();

    report += "<li><b>–ì—Ä–∞–≤–µ—Ü—å:</b> " + (playerName.isEmpty() ? "–ù–µ–≤—ñ–¥–æ–º–æ" : playerName) + "</li>";
    report += "<li><b>–ú–∞–ø–∞:</b> " + (mapName.isEmpty() ? "–ù–µ–≤—ñ–¥–æ–º–æ" : mapName) + "</li>";
    report += "<li><b>–¢–µ—Ö–Ω—ñ–∫–∞:</b> " + (vehicle.isEmpty() ? "–ù–µ–≤—ñ–¥–æ–º–æ" : vehicle) + "</li>";

    report += "<li><b>–ö–ª—ñ—î–Ω—Ç XML:</b> " + data.value("clientVersionFromXml").toString() + "</li>";
    report += "<li><b>–ö–ª—ñ—î–Ω—Ç EXE:</b> " + data.value("clientVersionFromExe").toString() + "</li>";
    report += "<li><b>–°–µ—Ä–≤–µ—Ä:</b> " + data.value("serverName").toString() + "</li>";
    report += "</ul>";

    report += "<h2>–ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏</h2>";
    report += "<ul>";

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–∞ –¥–ª—è –±–æ–π–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    if (data.contains("battleResults")) {
        QVariantMap battleResults = data.value("battleResults").toMap();
        QString personal = battleResults.value("personal").toString();

        report += "<li><b>–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—é:</b> " + battleResults.value("winnerTeam", "–ù–µ–≤—ñ–¥–æ–º–æ").toString() + "</li>";
        report += "<li><b>–û—Å–æ–±–∏—Å—Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> " + personal + "</li>";
    } else {
        report += "<li><b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–æ—é –≤—ñ–¥—Å—É—Ç–Ω—è.</b></li>";
    }

    report += "</ul>";

    // –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
    if (data.contains("damageAssistedRadio") || data.contains("damageDealt")) {
        report += "<h2>–ë–æ–π–æ–≤—ñ –¥–∞–Ω—ñ</h2>";
        report += "<ul>";
        report += "<li><b>–ó–∞–≤–¥–∞–Ω–∞ —à–∫–æ–¥–∞:</b> " + data.value("damageDealt", 0).toString() + "</li>";
        report += "<li><b>–®–∫–æ–¥–∞ –∑–∞ —Ä–æ–∑–≤—ñ–¥–∫—É:</b> " + data.value("damageAssistedRadio", 0).toString() + "</li>";
        report += "</ul>";
    }

    // üîπ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥—Ä–∞–≤—Ü—è
    report += "<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è</h2>";
    report += "<ul>";

    QString playerAccountId;
    if (data.contains("vehicles")) {
        QVariantMap vehiclesData = data.value("vehicles").toMap();
        QString myPlayerName = data.value("playerName").toString();

        // –ü–æ—à—É–∫ accountDBID (–∫–ª—é—á–∞ –≤ –º–∞–ø—ñ vehicles) –∑–∞ —ñ–º'—è–º –≥—Ä–∞–≤—Ü—è
        for (auto it = vehiclesData.constBegin(); it != vehiclesData.constEnd(); ++it) {
            QVariantMap vehicleInfo = it.value().toMap();
            if (vehicleInfo.value("name").toString() == myPlayerName) {
                playerAccountId = it.key();
                break;
            }
        }
    }


    if (!playerAccountId.isEmpty() && data.contains("battleResults")) {
        QVariantMap battleResults = data.value("battleResults").toMap();
        if (battleResults.contains(playerAccountId)) {
            QVariantMap playerStats = battleResults.value(playerAccountId).toMap();

            report += "<li><b>–ù–∞–Ω–µ—Å–µ–Ω–æ —à–∫–æ–¥–∏:</b> " + playerStats.value("damageDealt", 0).toString() + "</li>";
            report += "<li><b>–®–∫–æ–¥–∞ –∑–∞ —Ä–æ–∑–≤—ñ–¥–∫—É:</b> " + playerStats.value("damageAssistedRadio", 0).toString() + "</li>";
            report += "<li><b>–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —à–∫–æ–¥–∏:</b> " + playerStats.value("damageBlockedByArmor", 0).toString() + "</li>";
            report += "<li><b>–ó–Ω–∏—â–µ–Ω–æ:</b> " + playerStats.value("frags", 0).toString() + "</li>";
            report += "<li><b>–ü–æ—Å—Ç—Ä—ñ–ª–∏:</b> " + playerStats.value("shots", 0).toString() + "</li>";
            report += "<li><b>–í–ª—É—á–∞–Ω–Ω—è:</b> " + playerStats.value("hits", 0).toString() + "</li>";
            report += "<li><b>–ü—Ä–æ–±–∏—Ç—Ç—è:</b> " + playerStats.value("piercings", 0).toString() + "</li>";
            report += "<li><b>–û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å–≤—ñ–¥—É:</b> " + playerStats.value("xp", 0).toString() + "</li>";
            report += "<li><b>–û—Ç—Ä–∏–º–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤:</b> " + playerStats.value("credits", 0).toString() + "</li>";

        } else {
            report += "<li>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è –∑ ID " + playerAccountId + ".</li>";
        }
    } else {
        report += "<li>–î–∞–Ω—ñ –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</li>";
    }
    report += "</ul>";

    m_resultsTextEdit->clear();
    m_resultsTextEdit->setHtml(report);
}

void ReplayAnalyzerPage::displayResults(const QString& results) {
    m_resultsTextEdit->clear();
    m_resultsTextEdit->setHtml(results);
}

// üîπ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–ø–ª–µ—ó"
void ReplayAnalyzerPage::onClearReplaysButtonClicked() {
    // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    // –£–≤–∞–≥–∞: –¶–µ–π –º–µ—Ç–æ–¥ m_dbManager->clearReplays() –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏
    // —É –∫–ª–∞—Å—ñ DatabaseManager –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏.
    if (m_dbManager) {
        m_dbManager->clearAllData();
    }

    // –û—á–∏—â–µ–Ω–Ω—è UI
    m_replayList->clear();
    m_replayList->addItem("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ä–µ–ø–ª–µ—ó:"); // –î–æ–¥–∞—î–º–æ –Ω–∞–∑–∞–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    m_resultsTextEdit->clear();
    m_resultsTextEdit->setPlainText("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —Ç—É—Ç.");

    QMessageBox::information(this, "–ì–æ—Ç–æ–≤–æ", "–í—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–ø–ª–µ—ó –≤–∏–¥–∞–ª–µ–Ω–æ.");
}
