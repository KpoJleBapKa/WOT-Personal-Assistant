// replayanalyzerpage.cpp
#include "replayanalyzerpage.h"

#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QFileDialog>
#include <QFileInfo>
#include <QMessageBox>
#include <QDebug>
#include <QtConcurrent/QtConcurrent>
#include <QPushButton>
#include <QProgressBar>
#include <QListWidget>
#include <QTextEdit>
#include <QFutureWatcher>
#include <QLabel>
#include <QGraphicsDropShadowEffect>
#include <QSpacerItem>
#include <QScrollBar>
#include <QTimer>
#include <QPrinter>
#include <QTextDocument>
#include <QRandomGenerator>
#include <QDir>
#include <QMetaObject>
#include <QStorageInfo>

ReplayAnalyzerPage::ReplayAnalyzerPage(DatabaseManager *dbManager, QWidget *parent)
    : QWidget(parent), m_dbManager(dbManager)
{
    // Dark theme and global stylesheet
    setStyleSheet(R"(
        QWidget { background-color: #171717; color: #e6eef6; font-family: 'Segoe UI', 'Roboto', sans-serif; font-size: 13px; }
        QLabel { color: #dfe8f8; }
        QPushButton {
            background-color: #252525; color: #e6eef6; border: 1px solid #333;
            border-radius: 8px; padding: 8px 14px; min-height: 34px;
        }
        QPushButton:hover { background-color: #313131; }
        QPushButton:disabled { background-color: #1a1a1a; color: #777; }
        QPushButton#danger {
            background-color: #4b1f1f; border: 1px solid #662222;
        }
        QPushButton#danger:hover { background-color: #632727; }
        QProgressBar {
            background-color: #222; color: #e6eef6; border-radius: 6px; height: 18px; text-align: center;
        }
        QProgressBar::chunk { background-color: #4fa8ff; border-radius: 6px; }
        QListWidget {
            background-color: #1f1f1f; border: 1px solid #303030; border-radius: 8px;
            padding: 6px;
        }
        QListWidget::item { padding: 8px; margin: 2px 0; }
        QListWidget::item:selected { background-color: #3a7bd5; color: white; }
        QTextEdit { background-color: #161616; border: 1px solid #2f2f2f; border-radius: 8px; padding: 10px; color: #e6eef6; }
        QScrollBar:vertical { background: #1b1b1b; width: 10px; }
    )");

    auto *mainLayout = new QVBoxLayout(this);
    mainLayout->setContentsMargins(20, 20, 20, 20);
    mainLayout->setSpacing(14);

    // Top controls
    auto *topLayout = new QHBoxLayout();
    topLayout->setSpacing(10);

    m_selectFileButton = new QPushButton("üìÅ –í–∏–±—Ä–∞—Ç–∏ —Ä–µ–ø–ª–µ–π...", this);
    m_selectFileButton->setCursor(Qt::PointingHandCursor);

    m_clearReplaysButton = new QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", this);
    m_clearReplaysButton->setCursor(Qt::PointingHandCursor);
    m_clearReplaysButton->setObjectName("danger");

    m_deleteSelectedButton = new QPushButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π", this);
    m_deleteSelectedButton->setCursor(Qt::PointingHandCursor);

    m_exportPdfButton = new QPushButton("üì§ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —è–∫ PDF", this);
    m_exportPdfButton->setCursor(Qt::PointingHandCursor);

    topLayout->addWidget(m_selectFileButton);
    topLayout->addWidget(m_clearReplaysButton);
    topLayout->addWidget(m_deleteSelectedButton);
    topLayout->addWidget(m_exportPdfButton);
    topLayout->addStretch();

    auto *hintLabel = new QLabel("<i>–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–∞–π–ª–∏: <b>.wotreplay</b></i>");
    hintLabel->setStyleSheet("color:#9fb5df; font-size:12px;");
    topLayout->addWidget(hintLabel, 0, Qt::AlignRight);

    mainLayout->addLayout(topLayout);

    // Progress bar
    m_progressBar = new QProgressBar(this);
    m_progressBar->setRange(0, 100);
    m_progressBar->setValue(0);
    m_progressBar->setAlignment(Qt::AlignCenter);
    m_progressBar->setTextVisible(true);
    m_progressBar->setFormat("");
    mainLayout->addWidget(m_progressBar);

    // Content: left list + right results
    auto *contentLayout = new QHBoxLayout();
    contentLayout->setSpacing(18);

    // Left - replay list
    auto *leftLayout = new QVBoxLayout();
    leftLayout->setSpacing(8);

    auto *listTitle = new QLabel("üìÇ –°–ø–∏—Å–æ–∫ —Ä–µ–ø–ª–µ—ó–≤:");
    listTitle->setStyleSheet("font-weight:600; font-size:15px;");
    leftLayout->addWidget(listTitle);

    m_replayList = new QListWidget(this);
    m_replayList->setSelectionMode(QAbstractItemView::SingleSelection);
    m_replayList->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    m_replayList->setMinimumWidth(280);
    m_replayList->setMaximumWidth(360);

    auto *listShadow = new QGraphicsDropShadowEffect(this);
    listShadow->setBlurRadius(8);
    listShadow->setOffset(0, 2);
    listShadow->setColor(QColor(0, 0, 0, 160));
    m_replayList->setGraphicsEffect(listShadow);

    leftLayout->addWidget(m_replayList);

    auto *listBtnsLayout = new QHBoxLayout();
    listBtnsLayout->setSpacing(8);
    listBtnsLayout->addStretch();
    leftLayout->addLayout(listBtnsLayout);

    auto *leftWidget = new QWidget(this);
    leftWidget->setLayout(leftLayout);
    contentLayout->addWidget(leftWidget);

    // Right - results
    auto *rightLayout = new QVBoxLayout();
    rightLayout->setSpacing(10);

    auto *resultsTitle = new QLabel("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É:");
    resultsTitle->setStyleSheet("font-weight:600; font-size:15px;");
    rightLayout->addWidget(resultsTitle);

    m_resultsTextEdit = new QTextEdit(this);
    m_resultsTextEdit->setReadOnly(true);
    m_resultsTextEdit->setPlainText("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–ø–ª–µ–π –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–æ–≤–∏–π, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É.");
    m_resultsTextEdit->verticalScrollBar()->setSingleStep(20);

    auto *resultsShadow = new QGraphicsDropShadowEffect(this);
    resultsShadow->setBlurRadius(10);
    resultsShadow->setOffset(0, 3);
    resultsShadow->setColor(QColor(0,0,0,160));
    m_resultsTextEdit->setGraphicsEffect(resultsShadow);

    rightLayout->addWidget(m_resultsTextEdit);

    auto *rightWidget = new QWidget(this);
    rightWidget->setLayout(rightLayout);
    contentLayout->addWidget(rightWidget, 1);

    mainLayout->addLayout(contentLayout);

    // Init modules
    m_replayParser = new ReplayParser(this);
    m_metricsCalculator = new MetricsCalculator(this);
    m_behaviorAnalyzer = new BehaviorAnalyzer(this);
    m_recommenderSystem = new RecommenderSystem(this);

    // Connections
    connect(m_selectFileButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onSelectFileButtonClicked);
    connect(m_replayList, &QListWidget::itemClicked, this, &ReplayAnalyzerPage::onReplayListItemClicked);
    connect(&m_watcher, &QFutureWatcher<QVariantMap>::finished, this, &ReplayAnalyzerPage::handleAnalysisFinished);
    connect(m_clearReplaysButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onClearReplaysButtonClicked);
    connect(m_deleteSelectedButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onDeleteSelectedClicked);
    connect(m_exportPdfButton, &QPushButton::clicked, this, &ReplayAnalyzerPage::onExportPdfClicked);

    m_replaysFolderPath = findReplaysFolder();

    // Load cached
    loadCachedReplays();
}

ReplayAnalyzerPage::~ReplayAnalyzerPage() {}

QString ReplayAnalyzerPage::cleanVehicleName(const QString &technicalName)
{
    // –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–∑–≤–∏ —á–∞—Å—Ç–æ –º–∞—é—Ç—å —Ñ–æ—Ä–º–∞—Ç "–Ω–∞—Ü—ñ—è-–∫–æ–¥_–Ω–∞–∑–≤–∞", –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "usa-A12_T29"
    // –ú–∏ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º–æ —á–∞—Å—Ç–∏–Ω—É –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É '_'
    int lastUnderscorePos = technicalName.lastIndexOf('_');
    if (lastUnderscorePos != -1) {
        return technicalName.mid(lastUnderscorePos + 1);
    }

    // –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç —ñ–Ω—à–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É —è–∫ —î
    return technicalName;
}

// -------------------- UI / interaction methods --------------------

void ReplayAnalyzerPage::onSelectFileButtonClicked()
{
    // –¢–µ–ø–µ—Ä –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–∂–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö
    QString filePath = QFileDialog::getOpenFileName(this,
                                                    "–í–∏–±—Ä–∞—Ç–∏ —Ä–µ–ø–ª–µ–π",
                                                    m_replaysFolderPath,
                                                    "World of Tanks Replays (*.wotreplay)");
    if (filePath.isEmpty())
        return;

    // –†–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
    QFileInfo fileInfo(filePath);

    for (int i = 0; i < m_replayList->count(); ++i) {
        if (m_replayList->item(i)->data(Qt::UserRole).toString() == filePath) {
            QMessageBox::information(this, "–§–∞–π–ª –≤–∂–µ –¥–æ–¥–∞–Ω–æ", "–¶–µ–π —Ä–µ–ø–ª–µ–π –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É.");
            return;
        }
    }

    QListWidgetItem *item = new QListWidgetItem(QStringLiteral("üéÆ %1").arg(fileInfo.fileName()));
    item->setData(Qt::UserRole, filePath);
    m_replayList->addItem(item);
    m_replayList->setCurrentItem(item);

    analyzeReplay(filePath);
}

void ReplayAnalyzerPage::onReplayListItemClicked(QListWidgetItem *item) {
    if (!item) return;
    QString path = item->data(Qt::UserRole).toString();
    if (!path.isEmpty()) analyzeReplay(path);
}

void ReplayAnalyzerPage::loadCachedReplays() {
    m_replayList->clear();

    if (!m_dbManager) return;
    QVariantList cachedReplays = m_dbManager->getReplays();
    for (const QVariant &replayData : cachedReplays) {
        QVariantMap replayMap = replayData.toMap();
        QString filePath = replayMap.value("filePath").toString();
        QFileInfo fileInfo(filePath);
        if (fileInfo.exists()) {
            QListWidgetItem* item = new QListWidgetItem(QStringLiteral("üéÆ %1").arg(fileInfo.fileName()));
            item->setData(Qt::UserRole, filePath);
            m_replayList->addItem(item);
        }
    }
}

void ReplayAnalyzerPage::analyzeReplay(const QString &filePath) {
    if (filePath.isEmpty()) return;

    if (m_dbManager) {
        QVariantMap cachedData = m_dbManager->getReplayData(filePath);
        if (!cachedData.isEmpty()) {
            displayStructuredResults(cachedData);
            return;
        }
    }

    // UX lock
    m_progressBar->setValue(0);
    m_progressBar->setFormat("üìä –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É...");
    m_selectFileButton->setEnabled(false);
    m_clearReplaysButton->setEnabled(false);
    m_deleteSelectedButton->setEnabled(false);
    m_exportPdfButton->setEnabled(false);
    m_replayList->setEnabled(false);

    m_resultsTextEdit->setPlainText(QString("–ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É —Ñ–∞–π–ª—É: %1").arg(QFileInfo(filePath).fileName()));

    // Simulate progress while parser runs
    if (auto existing = findChild<QTimer*>("replayProgressTimer")) {
        existing->stop();
        existing->deleteLater();
    }
    QTimer *progressTimer = new QTimer(this);
    progressTimer->setObjectName("replayProgressTimer");
    progressTimer->setInterval(140);
    connect(progressTimer, &QTimer::timeout, this, [this]() {
        int v = m_progressBar->value();
        if (v < 90) {
            int step = QRandomGenerator::global()->bounded(3, 11); // 3..10
            m_progressBar->setValue(qMin(90, v + step));
        }
    });
    progressTimer->start();

    QFuture<QVariantMap> future = QtConcurrent::run([this, filePath]() {
        return m_replayParser->parse(filePath);
    });
    m_watcher.setFuture(future);
}

void ReplayAnalyzerPage::handleAnalysisFinished() {
    // finalize progress
    m_progressBar->setValue(100);
    m_progressBar->setFormat("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");

    if (auto timer = findChild<QTimer*>("replayProgressTimer")) {
        timer->stop();
        timer->deleteLater();
    }

    m_selectFileButton->setEnabled(true);
    m_clearReplaysButton->setEnabled(true);
    m_deleteSelectedButton->setEnabled(true);
    m_exportPdfButton->setEnabled(true);
    m_replayList->setEnabled(true);

    QVariantMap analysisResults = m_watcher.result();

    if (analysisResults.isEmpty() || !analysisResults.contains("personal")) {
        QMessageBox::critical(this, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª —Ä–µ–ø–ª–µ—é. –ú–æ–∂–ª–∏–≤–æ, —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ –∞–±–æ –º–∞—î –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.");
        m_resultsTextEdit->setPlainText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ñ–∞–π–ª—É.");

        for (int i = 0; i < m_replayList->count(); ++i) {
            auto *it = m_replayList->item(i);
            if (it && m_watcher.future().result().value("filePath").toString() == it->data(Qt::UserRole).toString()) {
                delete m_replayList->takeItem(i);
                break;
            }
        }
        return;
    }

    QString filePath = analysisResults.value("filePath").toString();
    if (m_dbManager) m_dbManager->addReplayData(filePath, analysisResults);

    displayStructuredResults(analysisResults);
}

// replayanalyzerpage.cpp

void ReplayAnalyzerPage::displayStructuredResults(const QVariantMap &data)
{
    // --- 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤ ---
    QString playerName = data.value("playerName").toString();
    QVariantMap metrics = m_metricsCalculator->calculate(data);
    QVariantMap behavior = m_behaviorAnalyzer->analyze(data, metrics);
    QStringList recommendations = m_recommenderSystem->generate(data, metrics, behavior);

    // --- 2. –ü–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è HTML-–∑–≤—ñ—Ç—É ---
    QString report;
    QLocale locale(QLocale::English); // –î–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª
    report += "<div style='font-family:Segoe UI, Roboto, sans-serif; color:#e6eef6;'>";

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–±–µ–∑ –∑–º—ñ–Ω)
    report += "<div style='display:flex; align-items:center; gap:12px;'>"
              "<h1 style='margin:0; font-size:20px;'>üìÑ –ó–≤—ñ—Ç –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–ø–ª–µ—é</h1>"
              "</div>";

    // –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–±–µ–∑ –∑–º—ñ–Ω)
    report += "<div style='margin-top:10px; padding:12px; background:#141414; border:1px solid #2b2b2b; border-radius:8px;'>";

    // --- –ë–ª–æ–∫ "–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è" (–±–µ–∑ –∑–º—ñ–Ω) ---
    report += "<h2 style='margin:6px 0 8px 0; font-size:16px; color:#9fc4ff;'>–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—ñ–π</h2>";
    report += "<ul style='margin:0 0 8px 18px; line-height: 1.65;'>";

    QVariantMap common = data.value("common").toMap();
    Q_UNUSED(common.value("duration", 0).toInt()); // duration –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
    int winnerTeam = common.value("winnerTeam", 0).toInt();
    int playerTeam = metrics.value("team", 0).toInt();

    report += QString("<li><b>–ì—Ä–∞–≤–µ—Ü—å:</b> %1</li>").arg(playerName);
    report += QString("<li><b>–°–µ—Ä–≤–µ—Ä:</b> %1</li>").arg(data.value("serverName", "N/A").toString());
    report += QString("<li><b>–ö–∞—Ä—Ç–∞:</b> %1</li>").arg(data.value("mapDisplayName", "N/A").toString());
    report += QString("<li><b>–¢–µ—Ö–Ω—ñ–∫–∞:</b> %1</li>").arg(metrics.value("cleanVehicleName").toString());

    if (winnerTeam != 0 && playerTeam != 0) {
        QString outcome = (winnerTeam == playerTeam)
        ? "<span style='color:#88ff88; font-weight:600;'>–ü–µ—Ä–µ–º–æ–≥–∞</span>"
        : "<span style='color:#ff8888; font-weight:600;'>–ü–æ—Ä–∞–∑–∫–∞</span>";
        report += QString("<li><b>–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—é:</b> %1</li>").arg(outcome);
    }
    report += "</ul>";


    // --- –ë–ª–æ–∫ "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è" –∑ –≤–µ–ª–∏–∫–∏–º–∏ –∫–∞—Ä—Ç–∫–∞–º–∏ (–ë–ï–ó –ó–ú–Ü–ù) ---
    report += "<h2 style='margin: 16px 0 12px 0; font-size: 18px; color: #9fc4ff;'>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è</h2>";
    report += "<div style='display: flex; flex-direction: column; gap: 36px; align-items: flex-start;'>";
    auto appendMetricSeparated = [&](const QString &label, const QString &value, const QString &color = "#ffffff") {
        report += QString("<div style='font-size: 17px; font-weight: 600; color: #cfd9ff; background: #181818; padding: 8px 14px; border-radius: 8px; display: inline-block; box-shadow: 0 0 6px rgba(0,0,0,0.5);'>%1:</div>").arg(label);
        report += QString("<div style='font-size: 40px; font-weight: 800; color: %1; background: #0f0f0f; padding: 14px 28px; border-radius: 12px; margin-top: 6px; margin-bottom: 12px; display: inline-block; box-shadow: inset 0 0 10px rgba(0,0,0,0.7); text-align: center;'>%2</div>").arg(color, value);
    };
    appendMetricSeparated("–ù–∞–Ω–µ—Å–µ–Ω–æ —à–∫–æ–¥–∏", locale.toString(metrics.value("totalDamageDealt", 0.0).toInt()), "#ffd166");
    appendMetricSeparated("–ó–Ω–∏—â–µ–Ω–æ", QString::number(metrics.value("kills", 0.0).toInt()), "#ff7b7b");
    appendMetricSeparated("–î–æ–ø–æ–º–æ–≥–∞ –∫–æ–º–∞–Ω–¥—ñ", locale.toString(metrics.value("damageAssisted", 0.0).toInt()), "#7be495");
    appendMetricSeparated("–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —à–∫–æ–¥–∏", locale.toString(metrics.value("damageBlockedByArmor", 0.0).toInt()), "#a0aaff");
    report += "</div>";


    // --- –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë–ª–æ–∫ "–ë–æ–π–æ–≤–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å" —Ç–∞ "–ï–∫–æ–Ω–æ–º—ñ–∫–∞" –∑ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º —Å—Ç–∏–ª–µ–º ---
    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∫–ª–∞–Ω –≥—Ä–∞–≤—Ü—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ
    QString clanAbbrev = "–ù–µ–º–∞—î";
    if (data.contains("vehicles")) {
        QVariantMap vehicles = data.value("vehicles").toMap();
        for (auto it = vehicles.constBegin(); it != vehicles.constEnd(); ++it) {
            QVariantMap vehicleData = it.value().toMap();
            if (vehicleData.value("name").toString() == playerName) {
                QString clan = vehicleData.value("clanAbbrev").toString();
                if (!clan.isEmpty()) {
                    clanAbbrev = clan;
                }
                break;
            }
        }
    }

    report += QString("<p style='margin-top:12px;'><b>–ö–ª–∞–Ω:</b> %1 &nbsp;&nbsp; <b>–ö–æ–º–∞–Ω–¥–∞:</b> %2</p>").arg(clanAbbrev).arg(playerTeam);

    // –ë–ª–æ–∫ "–ë–æ–π–æ–≤–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"
    report += "<h2 style='margin-top:14px; font-size:16px; color:#9fc4ff;'>–ë–æ–π–æ–≤–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h2>";
    report += "<ul style='margin-left:18px; line-height: 1.65;'>";
    report += QString("<li><b>–ü–æ—Å—Ç—Ä—ñ–ª–∏ / –í–ª—É—á–∞–Ω–Ω—è / –ü—Ä–æ–±–∏—Ç—Ç—è:</b> %1 / %2 / %3</li>")
                  .arg(metrics.value("shots", 0.0).toInt())
                  .arg(metrics.value("hits", 0.0).toInt())
                  .arg(metrics.value("piercings", 0.0).toInt());
    report += QString("<li><b>–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞ —à–∫–æ–¥–∞:</b> %1</li>").arg(locale.toString(metrics.value("potentialDamageReceived").toInt()));
    report += QString("<li><b>–í–∏—è–≤–ª–µ–Ω–æ –≤–æ—Ä–æ–≥—ñ–≤:</b> %1</li>").arg(metrics.value("spotted").toInt());

    QString achievementsText;
    int masteryMark = metrics.value("markOfMastery").toInt();
    if (masteryMark > 0 && masteryMark < 4) achievementsText += QString("–ó–Ω–∞–∫ –∫–ª–∞—Å–Ω–æ—Å—Ç—ñ %1, ").arg(masteryMark);
    if (metrics.value("isFirstBlood").toBool()) achievementsText += "\"–ü–µ—Ä—à–∞ –∫—Ä–æ–≤\", ";
    if (metrics.value("marksOnGun").toInt() > 0) achievementsText += QString("%1 –≤—ñ–¥–º—ñ—Ç–∫(–∞/–∏) –Ω–∞ —Å—Ç–≤–æ–ª—ñ, ").arg(metrics.value("marksOnGun").toInt());
    achievementsText += QString("%1 —ñ–Ω—à. –¥–æ—Å—è–≥–Ω–µ–Ω—å").arg(metrics.value("achievementsCount").toInt());
    report += QString("<li><b>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:</b> %1</li>").arg(achievementsText);
    report += "</ul>";

    // –ë–ª–æ–∫ "–ï–∫–æ–Ω–æ–º—ñ–∫–∞ —Ç–∞ –¥–æ—Å–≤—ñ–¥"
    report += "<h2 style='margin-top:14px; font-size:16px; color:#9fc4ff;'>–ï–∫–æ–Ω–æ–º—ñ–∫–∞ —Ç–∞ –¥–æ—Å–≤—ñ–¥</h2>";
    report += "<ul style='margin-left:18px; line-height: 1.65;'>";
    report += QString("<li><b>–î–æ—Å–≤—ñ–¥ –∑–∞ –±—ñ–π (—á–∏—Å—Ç–∏–π):</b> %1 (%2)</li>")
                  .arg(locale.toString(metrics.value("xp").toInt()))
                  .arg(locale.toString(metrics.value("originalXP").toInt()));
    report += QString("<li><b>–ö—Ä–µ–¥–∏—Ç–∏ –∑–∞ –±—ñ–π (—á–∏—Å—Ç—ñ):</b> %1 (%2)</li>")
                  .arg(locale.toString(metrics.value("credits").toInt()))
                  .arg(locale.toString(metrics.value("originalCredits").toInt()));
    report += QString("<li><b>–í—ñ–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥:</b> %1</li>").arg(locale.toString(metrics.value("freeXP").toInt()));
    report += "</ul>";

    // --- –Ü—Å–Ω—É—é—á—ñ –±–ª–æ–∫–∏ –∞–Ω–∞–ª—ñ–∑—É (–ë–ï–ó –ó–ú–Ü–ù) ---
    report += "<h2 style='margin-top:14px; font-size:16px; color:#9fc4ff;'>–ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</h2>";
    if (!metrics.isEmpty()) {
        report += "<ul style='margin-left:18px; line-height: 1.65;'>";
        report += QString("<li><b>–¢–æ—á–Ω—ñ—Å—Ç—å —Å—Ç—Ä—ñ–ª—å–±–∏:</b> %1</li>").arg(metrics.value("accuracy").toString());
        report += QString("<li><b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–±–∏—Ç—Ç—è:</b> %1</li>").arg(metrics.value("penetrationRatio").toString());
        report += QString("<li><b>–°–µ—Ä–µ–¥–Ω—è —à–∫–æ–¥–∞ –∑–∞ –ø—Ä–æ–±–∏—Ç—Ç—è:</b> %1</li>").arg(metrics.value("avgDmgPerPen").toInt());
        report += QString("<li><b>–°—É–º–∞—Ä–Ω–∏–π –≤–Ω–µ—Å–æ–∫ (—à–∫–æ–¥–∞ + –∞—Å–∏—Å—Ç + –±–ª–æ–∫):</b> %1</li>").arg(metrics.value("combinedContribution").toInt());
        report += "</ul>";
    } else {
        report += "<p style='color:#ffd966;'>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–ª—é—á–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫.</p>";
    }

    report += "<h2 style='margin-top:14px; font-size:16px; color:#9fc4ff;'>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —ñ–≥—Ä–æ–≤–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏</h2>";
    QString performanceGrade = behavior.value("performanceGrade").toString();
    if (performanceGrade.contains("–ø–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")) {
        report += "<p style='color:#ffcc00;'><b>–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑...</b></p>";
    } else if (!behavior.isEmpty()) {
        // –ë–∞–∑–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞
        report += "<h3 style='margin:12px 0 8px 0; font-size:14px; color:#aabfff;'>–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞</h3>";
        report += "<ul style='margin-left:18px; line-height: 1.65;'>";
        report += QString("<li><b>–û—Ü—ñ–Ω–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:</b> %1</li>").arg(performanceGrade);
        report += QString("<li><b>–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–≤–µ–¥—ñ–Ω–∫–∏:</b> %1</li>").arg(behavior.value("detailedBehavior").toString());
        report += "</ul>";

        // –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ç–∞–∫—Ç–∏—á–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–ª–µ–π - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ß–∞—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ë–æ–π–æ–≤–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ö–æ–º–∞–Ω–¥–Ω–∞ –≤–∑–∞—î–º–æ–¥—ñ—è - –≤–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è 0

        // –°–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if (behavior.contains("weaknessAnalysis")) {
            QVariantMap weaknesses = behavior.value("weaknessAnalysis").toMap();
            report += "<h3 style='margin:12px 0 8px 0; font-size:14px; color:#aabfff;'>–ê–Ω–∞–ª—ñ–∑ —Å–ª–∞–±–∫–∏—Ö –º—ñ—Å—Ü—å</h3>";
            report += "<ul style='margin-left:18px; line-height: 1.65;'>";
            report += QString("<li><b>–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:</b> %1</li>").arg(weaknesses.value("overallRating").toString());
            
            QStringList primaryWeaknesses = weaknesses.value("primaryWeaknesses").toStringList();
            if (!primaryWeaknesses.isEmpty()) {
                report += "<li><b>–û—Å–Ω–æ–≤–Ω—ñ —Å–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è:</b></li>";
                report += "<ul style='margin-left: 20px;'>";
                for (const QString &weakness : primaryWeaknesses) {
                    report += QString("<li>%1</li>").arg(weakness);
                }
                report += "</ul>";
            }
            
            QStringList secondaryWeaknesses = weaknesses.value("secondaryWeaknesses").toStringList();
            if (!secondaryWeaknesses.isEmpty()) {
                report += "<li><b>–î—Ä—É–≥–æ—Ä—è–¥–Ω—ñ —Å–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è:</b></li>";
                report += "<ul style='margin-left: 20px;'>";
                for (const QString &weakness : secondaryWeaknesses) {
                    report += QString("<li>%1</li>").arg(weakness);
                }
                report += "</ul>";
            }
            
            QStringList improvementAreas = weaknesses.value("improvementAreas").toStringList();
            if (!improvementAreas.isEmpty()) {
                report += "<li><b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:</b></li>";
                report += "<ul style='margin-left: 20px;'>";
                for (const QString &suggestion : improvementAreas) {
                    report += QString("<li>%1</li>").arg(suggestion);
                }
                report += "</ul>";
            }
            report += "</ul>";
        }

        // –ü–æ–≤–µ–¥—ñ–Ω–∫–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏ - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –†–æ–∑—à–∏—Ä–µ–Ω–∞ –±–æ–π–æ–≤–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ö–æ–º–∞–Ω–¥–Ω–∞ —Å–∏–Ω–µ—Ä–≥—ñ—è - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ä—Ç–∏
        if (behavior.contains("mapAnalysis")) {
            QVariantMap mapAnalysis = behavior.value("mapAnalysis").toMap();
            report += "<h3 style='margin:12px 0 8px 0; font-size:14px; color:#aabfff;'>üó∫Ô∏è –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ä—Ç–∏</h3>";
            report += "<ul style='margin-left:18px; line-height: 1.65;'>";
            report += QString("<li><b>–ù–∞–∑–≤–∞ –∫–∞—Ä—Ç–∏:</b> %1</li>").arg(mapAnalysis.value("mapName").toString());
            report += QString("<li><b>–¢–∏–ø –∫–∞—Ä—Ç–∏:</b> %1</li>").arg(mapAnalysis.value("mapType").toString());
            report += "</ul>";
        }

        // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è - –≤–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è 0

        // –ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ - –≤–∏–¥–∞–ª–µ–Ω–æ

        // –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        if (behavior.contains("performancePrediction")) {
            QVariantMap prediction = behavior.value("performancePrediction").toMap();
            report += "<h3 style='margin:12px 0 8px 0; font-size:14px; color:#aabfff;'>üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</h3>";
            report += "<ul style='margin-left:18px; line-height: 1.65;'>";
            report += QString("<li><b>–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥–∏:</b> %1</li>").arg(prediction.value("winProbability").toString());
            report += QString("<li><b>–û—á—ñ–∫—É–≤–∞–Ω–∞ —à–∫–æ–¥–∞:</b> %1</li>").arg(prediction.value("expectedDamage").toString());
            report += QString("<li><b>–†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É:</b> %1</li>").arg(prediction.value("riskLevel").toString());
            report += QString("<li><b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è:</b> %1</li>").arg(prediction.value("recommendedStrategy").toString());
            report += "</ul>";
        }
    }

    report += "<h2 style='margin-top:14px; font-size:16px; color:#9fc4ff;'>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h2>";
    if (!recommendations.isEmpty() && !performanceGrade.contains("–ø–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")) {
        report += "<ul style='margin-left:18px; line-height: 1.65;'>";
        for (const QString &rec : recommendations) {
            report += QString("<li> %1</li>").arg(rec);
        }
        report += "</ul>";
    } else {
        report += "<p style='color:#c0cbdc;'>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ.</p>";
    }

    report += "<h2 style='margin-top:14px; font-size:16px; color:#9fc4ff;'>–•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –±–æ—é</h2>";
    quint32 recorderEntityId = 0;
    if (data.contains("vehicles")) {
        QVariantMap vehiclesData = data.value("vehicles").toMap();
        for (auto it = vehiclesData.constBegin(); it != vehiclesData.constEnd(); ++it) {
            if (it.value().toMap().value("name").toString() == playerName) {
                recorderEntityId = it.key().toUInt();
                break;
            }
        }
    }
    report += generateTimelineHtml(data, recorderEntityId);

    report += "</div>"; // –ó–∞–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    report += "</div>"; // –ó–∞–∫—Ä–∏—Ç—Ç—è –æ–±–≥–æ—Ä—Ç–∫–∏

    m_resultsTextEdit->clear();
    m_resultsTextEdit->setHtml(report);
}

QString ReplayAnalyzerPage::generateTimelineHtml(const QVariantMap &data, quint32 recorderEntityId)
{
    Q_UNUSED(recorderEntityId); // –ú–∏ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –≥—Ä–∞–≤—Ü—è –Ω–∞–ø—Ä—è–º—É

    if (!data.contains("shot_events")) {
        return "<p style='color:#c0cbdc;'><i>–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –ø–æ—Å—Ç—Ä—ñ–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ü—å–æ–º—É —Ä–µ–ø–ª–µ—ó.</i></p>";
    }

    QVariantList shotEvents = data.value("shot_events").toList();
    if (shotEvents.isEmpty()) {
        return "<p style='color:#c0cbdc;'><i>–£ —Ü—å–æ–º—É –±–æ—é –Ω–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –ø–æ–¥—ñ—ó, —â–æ –∑–∞–≤–¥–∞–ª–∞ —à–∫–æ–¥–∏.</i></p>";
    }

    QString html;
    html += R"(
        <style>
            .timeline-table { width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 12px; }
            .timeline-table th, .timeline-table td { padding: 7px 9px; text-align: left; border-bottom: 1px solid #2f2f2f; }
            .timeline-table th { color: #aabfff; font-weight: 600; background-color: #222; }
            .timeline-table tr:last-child td { border-bottom: none; }
            .timeline-table tr:hover { background-color: #2a2a2a; }
            .damage-dealt { color: #ffd166; font-weight: 600; }
            .damage-received { color: #ff8888; font-weight: 600; }
            .no-damage { color: #888; }
            .friendly-fire { background-color: #4b1f1f; }
            .crit { font-style: italic; color: #ffb3b3; }
            .kill { font-weight: bold; color: #ff7b7b; }
        </style>
    )";
    html += "<table class='timeline-table'>";
    html += "<thead><tr><th>–ß–∞—Å</th><th>–ê—Ç–∞–∫—É—é—á–∏–π</th><th>–¶—ñ–ª—å</th><th style='text-align:right;'>–®–∫–æ–¥–∞</th><th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th></tr></thead><tbody>";

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –≥—Ä–∞–≤—Ü—è, —á–∏–π —Ä–µ–ø–ª–µ–π –º–∏ –¥–∏–≤–∏–º–æ—Å—è
    QString mainPlayerName = data.value("playerName").toString();

    for (const QVariant &shotVar : shotEvents) {
        QVariantMap shot = shotVar.toMap();

        float timestamp = shot.value("timestamp").toFloat();
        QString attackerName = shot.value("attackerName").toString();
        QString targetName = shot.value("targetName").toString();
        int damage = shot.value("damage").toInt();
        bool isFriendlyFire = shot.value("isFriendlyFire").toBool();
        QStringList criticalHits = shot.value("criticalHits").toStringList();

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å
        int totalSeconds = qRound(timestamp);
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        QString timeStr = QString("%1:%2").arg(minutes, 2, 10, QChar('0')).arg(seconds, 2, 10, QChar('0'));

        // –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        QString resultDesc;
        if (shot.value("isPenetration").toBool()) resultDesc += "–ü—Ä–æ–±–∏—Ç—Ç—è";
        else if (shot.value("isRicochet").toBool()) resultDesc += "–†–∏–∫–æ—à–µ—Ç";
        else if (shot.value("isShellExplosion").toBool()) resultDesc += "–°–ø–ª–µ—à";
        else if (shot.value("isNoDamage").toBool()) resultDesc += "–ë–µ–∑ —à–∫–æ–¥–∏";
        else resultDesc += "–í–ª—É—á–∞–Ω–Ω—è";

        bool isKill = false;
        if (!criticalHits.isEmpty()) {
            QStringList cleanCrits;
            for (const QString &crit : criticalHits) {
                if (crit == "–∑–Ω–∏—â–µ–Ω–æ") {
                    isKill = true;
                } else {
                    cleanCrits.append(crit);
                }
            }
            if (!cleanCrits.isEmpty()) {
                resultDesc += QString(" <span class='crit'>(%1)</span>").arg(cleanCrits.join(", "));
            }
        }
        if (isKill) {
            resultDesc += " <span class='kill'>–ó–ù–ò–©–ï–ù–û!</span>";
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è —Ä—è–¥–∫–∞ —Ç–∞ —à–∫–æ–¥–∏
        QString rowClass;
        if (isFriendlyFire) rowClass = "friendly-fire";

        QString damageClass;
        if (damage > 0) {
            if (attackerName == mainPlayerName) damageClass = "damage-dealt";
            else if (targetName == mainPlayerName) damageClass = "damage-received";
        } else {
            damageClass = "no-damage";
        }

        html += QString("<tr class='%1'><td>%2</td><td>%3</td><td>%4</td><td style='text-align:right;' class='%5'>%6</td><td>%7</td></tr>")
                    .arg(rowClass,
                         timeStr,
                         attackerName,
                         targetName,
                         damageClass,
                         QString::number(damage),
                         resultDesc);
    }

    html += "</tbody></table>";
    return html;
}

void ReplayAnalyzerPage::onDeleteSelectedClicked()
{
    auto *item = m_replayList->currentItem();
    if (!item) {
        QMessageBox::information(this, "–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ", "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–ø–ª–µ–π —É —Å–ø–∏—Å–∫—É, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏.");
        return;
    }

    QString filePath = item->data(Qt::UserRole).toString();
    QMessageBox::StandardButton reply = QMessageBox::question(this, "–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ–ø–ª–µ–π",
                                                              QString("–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ \"%1\" –∑ —Å–ø–∏—Å–∫—É?").arg(item->text()),
                                                              QMessageBox::Yes | QMessageBox::No);
    if (reply != QMessageBox::Yes) return;

    delete m_replayList->takeItem(m_replayList->row(item));

    if (m_dbManager) {
        bool invoked = QMetaObject::invokeMethod(m_dbManager, "removeReplayData", Q_ARG(QString, filePath));
        if (!invoked) {
            QMetaObject::invokeMethod(m_dbManager, "removeReplay", Q_ARG(QString, filePath));
        }
    }
}

// Export current HTML report to PDF
void ReplayAnalyzerPage::onExportPdfClicked()
{
    QString html = m_resultsTextEdit->toHtml();
    if (html.trimmed().isEmpty()) {
        QMessageBox::information(this, "–ù–µ–º–∞—î –∑–≤—ñ—Ç—É", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–ø–ª–µ—é, —â–æ–± –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç —É PDF.");
        return;
    }

    QString suggested = QDir::homePath() + "/replay_report.pdf";
    QString fileName = QFileDialog::getSaveFileName(this, "–ï–∫—Å–ø–æ—Ä—Ç –≤ PDF", suggested, "PDF files (*.pdf)");
    if (fileName.isEmpty()) return;

    QPrinter printer(QPrinter::HighResolution);
    printer.setOutputFormat(QPrinter::PdfFormat);
    printer.setOutputFileName(fileName);
    printer.setPageMargins(QMarginsF(15, 15, 15, 15));

    QTextDocument doc;
    doc.setDefaultFont(QFont("Segoe UI", 10));
    doc.setHtml(html);
   // doc.setPageSize(printer.pageRect().size());

    doc.print(&printer);

    QMessageBox::information(this, "–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ", QString("–ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É PDF: %1").arg(fileName));
}

// Clear list + DB
void ReplayAnalyzerPage::onClearReplaysButtonClicked() {
    QMessageBox::StandardButton reply =
        QMessageBox::question(this, "–û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É",
                              "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–ª–µ—ó–≤? –î–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ.",
                              QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        if (m_dbManager) {
            m_dbManager->clearAllData();
        }
        m_replayList->clear();
        m_resultsTextEdit->clear();
        m_resultsTextEdit->setPlainText("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–ø–ª–µ–π –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–æ–≤–∏–π, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É.");
        QMessageBox::information(this, "–ì–æ—Ç–æ–≤–æ", "–°–ø–∏—Å–æ–∫ —Ä–µ–ø–ª–µ—ó–≤ —Ç–∞ –∫–µ—à –∞–Ω–∞–ª—ñ–∑—É –æ—á–∏—â–µ–Ω–æ.");
    }
}

QString ReplayAnalyzerPage::findReplaysFolder()
{
    QList<QStorageInfo> drives = QStorageInfo::mountedVolumes();

    for (const auto& drive : drives) {
        if (!drive.isReady() || drive.isReadOnly()) {
            continue;
        }

        // –®—É–∫–∞—î–º–æ –ø–∞–ø–∫—É "World_of_Tanks_EU" –≤ –∫–æ—Ä–µ–Ω—ñ –¥–∏—Å–∫–∞
        QDir rootDir(drive.rootPath());
        QStringList entries = rootDir.entryList({"World_of_Tanks_EU"}, QDir::Dirs | QDir::NoDotAndDotDot, QDir::Name | QDir::IgnoreCase);

        if (!entries.isEmpty()) {
            // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏, —Ñ–æ—Ä–º—É—î–º–æ —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ 'replays'
            QString replaysPath = drive.rootPath() + entries.first() + "/replays";

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–∞–ø–∫–∞ 'replays' –¥—ñ–π—Å–Ω–æ —ñ—Å–Ω—É—î
            if (QDir(replaysPath).exists()) {
                qDebug() << "–ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–∫—É –∑ —Ä–µ–ø–ª–µ—è–º–∏:" << replaysPath;
                return replaysPath; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö
            }
        }
    }

    qDebug() << "–ü–∞–ø–∫—É –∑ —Ä–µ–ø–ª–µ—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à–ª—è—Ö.";
    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ–º–∞—à–Ω—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    return QDir::homePath();
}
